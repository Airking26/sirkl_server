import { Model } from "mongoose";
import { UpdateFcmDTO } from "./dto/dto.update_fcm";
import { UpdateUserInfoDTO } from "./dto/dto.update_user";
import { User } from "./interface/interface.user";
import { UserInfoDTO } from "./response/response.user";
import { Follow } from "src/follow/interface/interface.follow";
import { Call } from "src/call/interface/interface.call";
import { Inbox } from "src/inbox/interface/interface.inbox";
import { Nicknames } from "src/nicknames/interface/interface.nicknames";
import { Notification } from "src/notifications/interface/interface.notification";
import { Story } from "src/story/interface/story.interface";
import { NFT } from "src/nfts/interface/interface.nft";
import { FollowService } from "src/follow/follow.service";
import { AdminUserGetStream } from "./dto/dto.admin";
export declare class UserService {
    private readonly userModel;
    private readonly followModel;
    private readonly callModel;
    private readonly inboxModel;
    private readonly nicknamesModel;
    private readonly notificationModel;
    private readonly storyModel;
    private readonly nftModel;
    private readonly followService;
    constructor(userModel: Model<User>, followModel: Model<Follow>, callModel: Model<Call>, inboxModel: Model<Inbox>, nicknamesModel: Model<Nicknames>, notificationModel: Model<Notification>, storyModel: Model<Story>, nftModel: Model<NFT>, followService: FollowService);
    private readonly logger;
    createUserWithWallet(wallet: String, ens: String, platform: String): Promise<User & import("mongoose").Document<any, any>>;
    get_user_by_wallet(wallet: string): Promise<User>;
    find_user_by_wallet(user: any, wallet: string): Promise<UserInfoDTO>;
    connectToWS(user: any): Promise<void>;
    modifyPassword(wallet: any, newPassword: any, user: User): Promise<UserInfoDTO>;
    resetPassword(user: any, password: any): Promise<UserInfoDTO>;
    get_user_by_id(idToSearch: string): Promise<User>;
    update_refresh_token(refreshToken: string, user: User): Promise<User & import("mongoose").Document<any, any>>;
    deleteRefreshToken(user: User): Promise<UserInfoDTO>;
    showUser(id: string, user: User): Promise<UserInfoDTO>;
    updateUserInfos(updateUserInfoDTO: UpdateUserInfoDTO, ref: User): Promise<UserInfoDTO>;
    updateFCMToken(updateFcmDTO: UpdateFcmDTO, ref: User): Promise<UserInfoDTO>;
    updateApnToken(token: string, ref: User): Promise<UserInfoDTO>;
    deleteUser(userID: string, user: User): Promise<User & import("mongoose").Document<any, any>>;
    banProfile(id: string, user: User): Promise<UserInfoDTO>;
    generateStreamChatToken(user: User): string;
    connectToGetStream(user: User): Promise<void | import("stream-chat").ConnectionOpen<import("stream-chat").DefaultGenerics>>;
    receiveWelcomeMessage(user: User): Promise<void>;
    makeUserAdmin(adminDTO: AdminUserGetStream, user: User): Promise<void>;
    addToSirklClub(user: User): Promise<void>;
    generateAgoraTokenRTC(channel: string, roleReceived: string, tokenType: string, uid: string, req: any): Promise<any>;
    getLatestActiveUsersBetweenDates(offset: any, from: Date, to: Date, param: any, user: any): Promise<import("./response/response.user").UsersCountDTO>;
    getLatestUsersBetweenDates(offset: any, user: any, from: Date, to: Date, param: any, name: any): Promise<import("./response/response.user").UsersCountDTO>;
    getLatestUsersCountBetweenDates(user: any, from: Date, to: Date): Promise<{
        from: Date;
        to: Date;
        count: number;
    }>;
    changeUpdatedAt(wallet: any): Promise<User>;
}
